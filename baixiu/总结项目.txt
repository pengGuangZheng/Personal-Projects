一 .项目构成:
 1.前台 数据的显示,就是网站直接显示的数据
 2.后台 数据的管理,是网站背后的逻辑控制,包括发布信息,用户管理

 二.网站的架构:
 1.大多数网站是前后台使用不同的服务器,我们可以选择部署到不同的服务器上
  http://www.baixiu.com
  http://admin.baixiu.com

 2.也可以选择部署一个网站,一个服务器
 http://www.baixiu.com
 管理页面作为这个网站的一个文件夹来访问
 http://www.baixiu.com/admin/


三. 网站跟目录:
  assets/  资源文件(网站中需要使用的js,css以及内置的资源图片等);
  uploads/  用户上传的文件
  admin/ 管理页面的内容
  index.html 主页文件

四 .部署数据和基本设置

1.导入数据库
2.将网站配置到服务器上,修改hosts中的域名

五. 代码
 1.后台的逻辑
 (1)登录
 实际开发中,表单的验证是双方的,表单提交前,需要用js验证;数据发送到服务器后,需要使用
 后台语言验证.
 用户第一次登录为GET请求,服务器返回响应,一个包含登录表单的html给浏览器
 当用户填写完表单点击提交后,用户发送的是POST请求,login.php文件进行逻辑处理
  首先判断请求是否为post请求
      if ( $_SERVER[ "REQUEST_METHOD" ] === "POST" ) {
        process();
      }
      如果是POST请求,验证参数是否完整;
      参数完整,接收表单参数,验证用户名与密码是否匹配
      if(不匹配){
        输出错误信息,渲染页面,返回html

      }
      if(匹配){
        跳转到后台页面
      }


          //查询语句
              数据库的连接
              $conn=$mysqli_connect(ip,用户名,密码,数据库名);
              $reader=$mysqli_query($conn,$sql语句);//返回的是二维数组
              定义数组接收
              $list=array();
              通过读取器获取没一条数据
              while($item=mysqli_fetch_assoc($reader)){
                $list[]=$item;

              }
              释放读取器
              mysqli_free_assoc($reader);
              关闭连接
              mysqli_close($conn );

          //非查询语句

            $conn=$mysqli_connect(ip,用户名,密码,数据库名);  
            $isTrue = mysqli_query( $conn, $sql );
            mysqli_close( $conn );
      
      启动session会话机制,记录之前的登录状态
      session_start();
      //当前用户id与数据库id一致,跳转到主页
      $_SESSION["current_user_login_id"]=$list[0]["id"];
      header("location:./index.php");



  (2).index.php主页以及主页中的个人中心的操作
      index.php 
      页面加载:1.验证用户是否登录并获取信息(服务器端进行)(进行了封装);
     
     //一开始需要登录验证
     function check_login(){
       session_start();
       if(empty($_SESSION["current_user_login_id"])){
         header("location:./login.php");
       }
     }

     //登录成功后,session中存储了当前id
     $current_user_login_id=$_SESSION["current_user_login_id"];
     $user_info=itcast_query("SELECT * FROM users WHERE id=$current_user_login_id")[0];
      return $user_info;


      2.查询站点统计数据(聚合函数)
      $post_total=itcast_get_single_value("SELECT COUNT(*) FROM posts");
      $post_drafted_total=itcast_get_single_value("SELECT COUNT(*) FROM posts WHERE `status`='drafted'");
      
      3.获得当前用户的信息(头像avatar,nickname,id)
        id用于跳转到profile.php页面所带的参数  
    
  profile.php 
    1.页面加载初
    获得用户id请求数据

      封装获取的用户id

    将数据渲染到页面(jq+模板引擎)

      因为是使用的模板引擎,所以给文本框注册input事件使用的是事件委托
      图片上传,选中图片就上传,所以注册change事件
    
    2.页面加载完后,用户点击按钮提交
    获取表单中的所有数据用serialize()方法;
    用正则表达式验证数据的完整
    $(正则表达式).test(获取的数据);


    3.抽取公共部分
    将左侧列表和顶端的个人中心和退出部分抽离出,形成单独文件,用include_once "文件"引入;
    高亮部分,通过类名active更改;
    如果模板是共享的,该如何解决不一样的页面出现不同的效果呢?
    答:在模板编辑的时候,通过设定三元运算符来判断是否是,如果是就加上类名

    4.用户管理页面
    (1).页面一加载就显示数据
    在页面中的ready事件中,用jq语法发送AJAX请求,获得所有数据
    利用模板引擎将数据显示在页面中
    function load_data(){ //封装获取数据,数据的加载
      $.get('./api/getallusers.php',function(json){ //发送ajax请求
        //渲染页面
        if(json.success){
          $('#user_list_table tbody').html(template('usersTpl',{
            list:json.result   //模板引擎渲染
          }));
        }
      });
    }

    解析操作步骤:
    一 . 找到写好的页面,提取模板
    二 . 写模板,利用循环写tr ,注意自定义data-id的使用
    三 . 引入文件 template-web.js
    四 . 写入js 的逻辑发送请求
    五 . 实现php的逻辑,获得所有的数据,以json的格式返回数据,
    六 . 回到显示页面,判断if(json.success),渲染页面



   (2).删除逻辑 
     一. 发送Ajax请求删除数据,传入删除的id到php,删除数据库中的数据
     ,删除后,js代码需要更新页面的内容:
     注册点击删除的事件,在删除事件中发送ajax请求
     注意:由于删除按钮是模板引擎生成,所以需要使用事件代理

     操作步骤:
     1>利用事件代理注册删除按钮的点击事件
     2>获得需要删除的id
     3>发送删除的请求到php 
     4>php接收参数,删除数据,返回成功与否
     5>ajax接收删除成功与否,成功就提示删除成功的信息,然后重新加载数据load_data();

    (3)批量删除
     1>全选的逻辑:
       实现复选框的联动--点击表头的复选框,全部选中,有一个表体中的选框没选中,表头就不选中;每次修改选中情况时,获得选中元素的id
     2>批量批量删除按钮的控制
     定义数组,接收选中的id,有一个被选中就显示批量删除按钮
     注册change事件,循环,然后发送请求,删除数据 
       
  5.新增用户

     






     





   


      





 2.前台的逻辑





